services:
  nginx:
    image: nginx:latest
    ports:
      - "7777:7777"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - server
      - frontend_client
    networks:
      - transcendence


  server:
    build:
      context: .
      dockerfile: GameServer/Dockerfile.server
    networks:
        - transcendence
    ports:
        - "8000:8000"
    env_file:
      - .env
    environment:
      AI_WS_URL: "ws://server:8000"
      SSL_CERT_FILE: "/etc/nginx/ssl/nginx.crt"
      SSL_KEY_FILE: "/etc/nginx/ssl/nginx.key"
      AI_SERVICE_TOKEN: ${AI_SERVICE_TOKEN}
      GAME_SERVICE_TOKEN: ${GAME_SERVICE_TOKEN}
      UNKNOWN_USER_SERVICE_TOKEN: ${UNKNOWN_USER_SERVICE_TOKEN}
    volumes:
        - ./ssl:/etc/nginx/ssl:ro


  matchmaking:
    build:
      context: .
      dockerfile: matchmaking/Dockerfile.matchmaking
    env_file:
      - .env
    environment:
      DJANGO_ALLOWED_HOSTS: "localhost 127.0.0.1 matchmaking nginx 192.168.0.0/16 10.0.0.0/8"
      SSL_CERT_FILE: "/etc/nginx/ssl/nginx.crt"
      SSL_KEY_FILE: "/etc/nginx/ssl/nginx.key"
      AI_SERVICE_TOKEN: ${AI_SERVICE_TOKEN}
      CLI_SERVICE_TOKEN: ${CLI_SERVICE_TOKEN}
      GAME_SERVICE_TOKEN: ${GAME_SERVICE_TOKEN}
      UNKNOWN_USER_TOKEN: ${UNKNOWN_USER_SERVICE_TOKEN}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    networks:
      - transcendence
    ports:
      - "8001:8001"
    volumes:
      - ./matchmaking:/app
      - ./ssl:/etc/nginx/ssl:ro
    working_dir: /app/matchmaking_service


  ai_client:
    build:
      context: .
      dockerfile: PongAI/Dockerfile.ai
    env_file:
      - .env
    environment:
      AI_SERVICE_TOKEN: ${AI_SERVICE_TOKEN}
      AI_HASH_SECRET: ${AI_HASH_SECRET}
    depends_on:
      - nginx
      - server
      - frontend_client
    networks:
        - transcendence
    volumes:
        - ./PongAI/ai_data:/app/ai_data
        - ./ssl:/etc/nginx/ssl:ro
  
  cli_client:
    build: 
      context: .
      dockerfile: CLI_client/Dockerfile.CLI_client
    networks:
      - transcendence
    depends_on:
      - server
      - nginx
    env_file:
      - .env
    environment:
      CLI_SERVICE_TOKEN: ${CLI_SERVICE_TOKEN}
      AI_WS_URL: "ws://server:8000"
      DISPLAY: ${DISPLAY} # Utilise la variable d'environnement DISPLAY de l'hôte
      SDL_AUDIODRIVER: "dummy" # Désactive le son pour éviter les erreurs de son
      XDG_RUNTIME_DIR: "/tmp/runtime-docker" # Utilise un répertoire temporaire pour les fichiers X11
#      LIBGL_DRI3_DISABLE: "1" # Désactive DRI3 pour éviter les erreurs de rendu
#      LIBGL_ALWAYS_SOFTWARE: "1" # Utilise le rendu logiciel pour éviter les erreurs de rendu
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix # Monte le socket X11 de l'hôte
      - /dev/dri:/dev/dri  # Monte les périphériques graphiques pour l'accélération matérielle
      - ./ssl:/etc/nginx/ssl:ro
    stdin_open: true # Maintenir STDIN ouvert pour interaction (optionnel)
    tty: true # Assurer un terminal interactif


  frontend_client:
    build:
      context: .
      dockerfile: AstroPong/Dockerfile.frontend
      args:
        VITE_UNKNOWN_USER_SERVICE_TOKEN: ${VITE_UNKNOWN_USER_SERVICE_TOKEN}
        VITE_API_URL: "http://0.0.0.0:8080"
        VITE_CLIENT_ID: ${VITE_CLIENT_ID}
        VITE_REDIRECT_URI: ${VITE_REDIRECT_URI}
        VITE_BACKEND_URL: "https://nginx:81"
        VITE_WS_URL: "ws://nginx:81"
    env_file:
      - .env
    ports:
      - "5173:5173"
    depends_on:
      - server
    networks:
        - transcendence
    volumes:
      - ./ssl:/etc/nginx/ssl:ro


  postgres:
    container_name: postgres
    build:
      context: ./auth-db/postgres
      dockerfile: Dockerfile
      args:
        POSTGRES_DB: ${DB_NAME}
        POSTGRES_USER: ${DB_USER}
        POSTGRES_PASSWORD: ${DB_PASSWORD}
    env_file: .env
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - transcendence


  auth:
    container_name: auth
    build:
      context: ./auth-db/oauth2
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - .:/code
      - ./ssl:/etc/ssl:ro
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    restart: on-failure
    networks:
      - transcendence


volumes:
  pgdata:
    driver: local

networks:
  transcendence:
    driver: bridge
